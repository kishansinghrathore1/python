# -*- coding: utf-8 -*-
"""29.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G0wEmcZ2WuDmkEdtcNy29NybawxfupT6
"""

'''Define a function generate_n_chars() that takes an integer n and a character c and returns a string, n
characters long, consisting only of c:s. For example, generate_n_chars(5,"x") should return the string
"xxxxx". (Python is unusual in that you can actually write an expression 5 * "x" that will evaluate to
"xxxxx". For the sake of the exercise you should ignore that the problem can be solved in this
manner.)'''

def generate_n_chars(n, c):
    result = ''
    for i in range(n):
        result += c
    return result

# Get input for the number
num = int(input("Enter a number: "))

# Get input for the character
char = input("Enter a character: ")

print(generate_n_chars(num, char))

'''The function max() from exercise 1) and the function max_of_three() from exercise 2) will only
work for two and three numbers, respectively. But suppose we have a much larger number of
numbers, or suppose we cannot tell in advance how many they are? Write a function max_in_list()
that takes a list of numbers and returns the largest one.'''

def max_in_list(L):
    max = L[0]
    for i in L:
        if i > max:
            max = i
    return max
print(max_in_list([1, 5, 3, 9, 2])) # Call the function with a list and print the result

'''Write a program that maps a list of words into a list of integers representing the lengths of the
correponding words.'''

def word_lengths(words):
    lengths = []
    for word in words:
        lengths.append(len(word))
    return lengths
words = input("Enter a list of words: ").split()
print(word_lengths(words))

a=input("enter a num").split()
l1=[]
for a in a:  # Use 'a' instead of 'b', as 'b' is not defined
    l1.append(len(a)) # Indent this line to be part of the for loop, and use 'a' to calculate length
print(l1) # Call the list directly, as 'l1' is not a function

''' 4.Write a function find_longest_word() that takes a list of words and returns the length of the longest
one. Modify the same to do with lambda expression.'''

def find_longest_word(words):
    lengths = [len(word) for word in words]
    return max(lengths)
words = input("Enter a list of words: ").split()
print(find_longest_word(words))

a = input("enter a num").split()
l1 = []
for word in a:  # Iterate over each word in the list 'a'
    l1.append(len(word))  # Append the length of each word to 'l1'
print(max(l1))  # Print the maximum value in the list 'l1'

''' 5.Write a function filter_long_words() that takes a list of words and an integer n and returns the list
of words that are longer than n. Modify the same to do with lambda expression.'''
def filter_long_words(words, n):
    return [word for word in words if len(word) > n]
words = input("Enter a list of words: ").split()
n = int(input("Enter an integer: "))
print(filter_long_words(words, n))

'''Write a function filter_long_words() that takes a list of words and an integer n and returns the list
of words that are longer than n. Modify the same to do with lambda expression.'''

def filter_long_words(words, n):
    """Filters a list of words to include only those longer than a given length.

    Args:
        words: A list of words.
        n: The minimum length for a word to be included in the result.

    Returns:
        A list of words longer than n.
    """
    long_words = []
    for word in words:
        if len(word) > n:
            long_words.append(word)
    return long_words

# Example usage
words = ["apple", "banana", "orange", "grapefruit", "kiwi"]
n = 5
print(filter_long_words(words, n))  # Output: ['banana', 'orange', 'grapefruit']

# Using lambda expression

words = ["apple", "banana", "orange", "grapefruit", "kiwi"]
n = 5

# Filter words longer than n
long_words = []
for word in words:
    if len(word) > n:
        long_words.append(word)

print(long_words)  # Output: ['banana', 'orange', 'grapefruit']

'''Write a version of a palindrome recognizer that also accepts phrase palindromes such as "Go hang a
salami I'm a lasagna hog.", "Was it a rat I saw?", "Step on no pets", "Sit on a potato pan, Otis", "Lisa
Bonet ate no basil", "Satan, oscillate my metallic sonatas", "I roamed under it as a tired nude Maori",
"Rise to vote sir", or the exclamation "Dammit, I'm mad!". Note that punctuation, capitalization, and
spacing are usually ignored.'''
def is_palindrome(phrase):
  for i in range(len(phrase)//2):
    if phrase[i] != phrase[-i-1]:
      return False
  return True

print(is_palindrome("A man, a plan, a canal: Panama"))

def is_palindrome(phrase):
  """Checks if a given phrase is a palindrome, ignoring punctuation, capitalization, and spaces."""

  # Remove punctuation, spaces, and convert to lowercase
  processed_phrase = ''.join(char.lower() for char in phrase if char.isalnum())

  for i in range(len(processed_phrase)//2):
    if processed_phrase[i] != processed_phrase[-i-1]:
      return False
  return True

print(is_palindrome("A man, a plan, a canal: Panama"))  # Output: True

'''A pangram is a sentence that contains all the letters of the English alphabet at least once, for
example: The quick brown fox jumps over the lazy dog. Your task here is to write a function to check
a sentence to see if it is a pangram or not.'''
def is_pangram(sentence):
    alphabet = "abcdefghijklmnopqrstuvwxyz"
    for char in alphabet:
        if char not in sentence.lower():
            return False
    return True

print(is_pangram("The quick brown fox jumps over the lazy dog"))

'''Represent a small bilingual lexicon as a Python dictionary in the following fashion {"merry":"god",
"christmas":"jul", "and":"och", "happy":gott", "new":"nytt", "year":"år"} and use it to translate your
Christmas cards from English into Swedish. That is, write a function translate() that takes a list of
English words and returns a list of Swedish words.'''
def translate(english_words):
    translation = {"merry":"god", "christmas":"jul", "and":"och", "happy":"gott", "new":"nytt", "year":"år"}
    swedish_words = []
    for word in english_words:
        if word in translation:
            swedish_words.append(translation[word])
        else:
            swedish_words.append(word)
    return swedish_words

print(translate(["merry", "christmas", "and", "happy", "new", "year"]))

'''9. Write a function char_freq() that takes a string and builds a frequency listing of the characters
contained in it. Represent the frequency listing as a Python dictionary. Try it with something
likechar_freq("abbabcbdbabdbdbabababcbcbab").'''

def char_freq(string):
    freq = {}
    for char in string:
        if char in freq:
            freq[char] += 1
        else:
            freq[char] = 1
    return freq

print(char_freq("abbabcbdbabdbdbabababcbcbab"))

'''10. Create a module called mathematics.py and provide subroutines (should be defined generally and
should work for any number of arguments) such as:
Add Sub
Sort the values Max Sort

Internal Use - Confidential

Use the module in a program and apply the functions on two array variables (say a and b) to:
Add two arrays (and store it in c) Subtract two arrays(and store it in d)
Find the minimum and maximum value of the resultant array (c or d) Sort the resultant array(c or d)'''
def add(a, b):
    c = []
    for i in range(len(a)):
        c.append(a[i] + b[i])
    return c
print(add([1, 2, 3], [4, 5, 6]))

